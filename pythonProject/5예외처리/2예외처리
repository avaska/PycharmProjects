
[1] 오류의 종류
- 프로그래밍 언어의 오류(error)에는 크게 두가지 종류가 있습니다
    1. 프로그램 실행전에 발생하는 오류(구문오류-> syntax error)
    2. 프로그램 실행중에 발생하는 오류(예외 -> exception 또는 런타임 오류)

[2] 구문오류에 대한 설명
- 구문 오류는 괄호의 개수, 들여쓰기 문제 등으로 인해 프로그램이 실행되기도 전에 발생하는 오류입니다.

(그림) 구문 오류가 발생하는 코드
        # print함수 호출시 문자열에 닫는 따옴표로 문자열을 닫지 않아 구문 오류가 발생 하는 코드
        print("프로그램이 시작되었습니다    )

(그림) (오류메세지)
SyntaxError: EOL while scanning string literal

위 오류 메세지에 대한 설명 :
코드를 실행하면 EOL(End of line)에 문제가 있다고 합니다
중요한 것은 앞에 적혀 있는 SyntaxError라는 단어 입니다
SyntaxError는 구문에 문제가 있어서 프로그램이 실행조차 되지 않는다라는 오류 입니다
구문오류를 해결 하지 않으면 프로그램 자체가 실행되지 않습니다.
따라서 코드를 제대로 수정 해야 합니다.


[3] 예외에 대한 설명
- 프로그램이 일단 실행된 다음, 실행 중에 발생하는 오류를 예외(Exception) 또는 런타임 오류라고 부릅니다

(그림) 예외가 발생하는 코드

print("프로그램이 시작되었습니다")

#예외가 발생하는 코드
list_a[1]

(그림)  예외 발생 런타임 오류 메세지
#프로그램이 시작되었습니다  ------> 여기까지는 프로그램이 정상적으로 실행되었다는 것을 확인할수 있습니다.
.....
......
.......
NameError : name 'list_a' is not defined ----> list_a라는 이름을 가진 것이 정의 되지 않았다는 의미로
                                               예외가 발생 했다는 메세지임

-----------------------------------------------------------------------------------------

(그림) 예외 해결

print("프로그램이 시작되었습니다")

#예외 발생 코드 해결
list_a = [1,2,3,4,5] ---> 위 예외 발생 메세지에서 정의 되지 않았다고 하니 정의 해줌으로써 예외를 해결함

list_a[1]


[5] 예외 처리란? 예외를 해결하는 모든 것을 예외처리라고 부릅니다.

[6] 예외 처리를 하는 이유?
어느 특정 부분의 예외가 발생하더라도 프로그램이 중간에 강제로 죽지 않고 정상종료 되게 하기 위함.

[7] 예외 처리 방법 2가지
    1. 조건문을 사용하는 방법
    2. try구문을 사용하는 방법

Tip) 구문 오류는 프로그램이 실행조차 되지 않기 때문에 예외처리 방법으로 처리할수 없습니다.
     문법적인 문제가 발생한 코드를 수정해 줘야 합니다.

[8] 조건문으로 예외 처리하기 -> handle_with_codition.py 파일 실습

[9] try except 구문을 사용하여 예외 처리하기 -> handle_with_try.py 파일 실습

[10] try except 구문과 pass키워드 조합하기  -> try_pass.py 파일 실습

[11] try except else구문을 사용하여 예외 처리하기 -> try_except_else.py 파일 실습

[12] finally구문을 추가로 사용하여 예외 처리하기 -> try_except_else_finally.py 파일 실습

[13] 파일이 제대로 닫혔는지 확인하기  -> file_closed01.py 파일실습

[14] 파일 처리 중간에 예외발생 시키기  -> file_closed02.py 파일실습

[15] try구문 내부에서 retrun키워드를 사용하는 경우 -> try_return01.py 파일 실습





